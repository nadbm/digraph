type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# interface Namespacable {
#   organization: Organization!
# }

# interface ResourceIdentifiable {
#   resourceId: String!
#   resourcePath: String!
# }

type User {
  email: String!
  id: ID
  name: String!
}

# type Topic implements ResourceIdentifiable & Namespacable {
type Topic {
  childTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection
  description: String
  externalId: String!
  id: ID
  links(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): LinkConnection
  name: String!
#   organization: Organization!
  parentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection
  uid: String!
}

type TopicEdge {
  cursor: String!
  node: Topic
}

type TopicConnection {
  edges: [TopicEdge]
  pageInfo: PageInfo!
}

# type Link implements ResourceIdentifiable & Namespacable {
type Link {
  id: ID
  # organization: Organization!
  title: String!
  url: String!
  uid: String!
  topics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection
}

type LinkEdge {
  cursor: String!
  node: Link
}

type LinkConnection {
  edges: [LinkEdge]
  pageInfo: PageInfo!
}

# type Organization implements ResourceIdentifiable {
type Organization {
  id: ID
  externalId: String!
  uid: String!
  name: String!
  links(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): LinkConnection
  topic(externalId: String!): Topic
  topics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection
}

type Query {
  viewer: User
  organization(externalId: String!): Organization
}

# input CreateTopicInput {
#   clientMutationId: String!
#   description: String
#   name: String!
#   organizationId: String!
#   topicIds: [String!]
# }

# type CreateTopicPayload {
#   topicEdge: TopicEdge!
# }

# input UpsertLinkInput {
#   addTopicIds: [String!]
#   clientMutationId: String!
#   organizationId: String!
#   resourceId: String
#   title: String
#   url: String!
# }

# type UpsertLinkPayload {
#   linkEdge: LinkEdge!
# }

# type Mutation {
#   createTopic(input: CreateTopicInput!): CreateTopicPayload
#   upsertLink(input: UpsertLinkInput!): UpsertLinkPayload
# }

schema {
  query: Query
  # mutation: Mutation
}
